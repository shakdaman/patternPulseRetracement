//@version=6
indicator("HTF D&R Dashboard", "HTF Dashboard", overlay=false)

// --- User Inputs ---
ticker1 = input.string("SPY", "T1")
ticker2 = input.string("QQQ", "T2") 
ticker3 = input.string("IWM", "T3")
ticker4 = input.string("AAPL", "T4")
ticker5 = input.string("MSFT", "T5")
ticker6 = input.string("GOOGL", "T6")
ticker7 = input.string("NVDA", "T7")
ticker8 = input.string("TSLA", "T8")

htf_timeframe = input.timeframe("D", "HTF")
retrace_percent = input.float(50.0, "Retrace %", 0.1, 100.0)
i_showDebug = input.bool(false, "Debug")

// --- HTF D&R Logic Function ---
// This function contains the core HTF D&R logic from the main indicator
getHTFSignal(ticker, htf, retracePct) =>
    // Get HTF data
    htfHigh = request.security(ticker, htf, high, lookahead = barmerge.lookahead_off)
    htfLow = request.security(ticker, htf, low, lookahead = barmerge.lookahead_off)
    htfBarConfirmed = request.security(ticker, htf, barstate.isconfirmed, lookahead = barmerge.lookahead_off)
    
    // Store HTF values only when confirmed
    var float storedHTFHigh = na
    var float storedHTFLow = na
    var int lastHTFBarIndex = 0
    
    htfBarIndex = request.security(ticker, htf, bar_index, lookahead = barmerge.lookahead_off)
    
    if htfBarConfirmed and htfBarIndex != lastHTFBarIndex and not na(htfHigh) and not na(htfLow)
        storedHTFHigh := htfHigh
        storedHTFLow := htfLow
        lastHTFBarIndex := htfBarIndex
    
    htfHigh := storedHTFHigh
    htfLow := storedHTFLow
    
    // Return early if no HTF data
    if na(htfHigh) or na(htfLow)
        "WAITING"
    else
        // State management
        var int state = 0
        
        // Break detection
        var bool lowWasBroken = false
        var bool highWasBroken = false
        
        if not na(htfLow) and low < htfLow
            lowWasBroken := true
            highWasBroken := false
        if not na(htfHigh) and high > htfHigh
            highWasBroken := true
            lowWasBroken := false
        
        // Reset when new HTF bar forms
        if htfHigh != htfHigh[1] or htfLow != htfLow[1]
            lowWasBroken := false
            highWasBroken := false
            state := 0
        
        // State machine
        if htfHigh != htfHigh[1] or htfLow != htfLow[1]
            state := 0
        
        switch state
            0 => // Neutral state: waiting for a deviation.
                if high > htfHigh
                    state := 1 // Price deviated above.
                else if low < htfLow
                    state := 2 // Price deviated below.
            1 => // Deviated Above state: waiting for return to range.
                if close < htfHigh
                    state := 3 // Price has returned.
            2 => // Deviated Below state: waiting for return to range.
                if close > htfLow
                    state := 4 // Price has returned.
        
        // Calculate retracement levels
        htfRange = htfHigh - htfLow
        retraceValue = htfRange * (retracePct / 100.0)
        
        var float bullishRetraceLevel = na
        var float bearishRetraceLevel = na
        
        if lowWasBroken
            bullishRetraceLevel := htfLow + retraceValue
            bearishRetraceLevel := htfLow + retraceValue
        else if highWasBroken
            bullishRetraceLevel := htfHigh - retraceValue
            bearishRetraceLevel := htfHigh - retraceValue
        else
            bullishRetraceLevel := htfHigh - retraceValue
            bearishRetraceLevel := htfLow + retraceValue
        
        // Alert conditions
        bullishAlertCondition = state == 4 and close > bearishRetraceLevel
        bearishAlertCondition = state == 3 and close < bullishRetraceLevel
        
        // Return signal
        if bullishAlertCondition
            "LONG"
        else if bearishAlertCondition
            "SHORT"
        else
            "WAITING"

// --- Get Signals for All Tickers ---
signal1 = getHTFSignal(ticker1, htf_timeframe, retrace_percent)
signal2 = getHTFSignal(ticker2, htf_timeframe, retrace_percent)
signal3 = getHTFSignal(ticker3, htf_timeframe, retrace_percent)
signal4 = getHTFSignal(ticker4, htf_timeframe, retrace_percent)
signal5 = getHTFSignal(ticker5, htf_timeframe, retrace_percent)
signal6 = getHTFSignal(ticker6, htf_timeframe, retrace_percent)
signal7 = getHTFSignal(ticker7, htf_timeframe, retrace_percent)
signal8 = getHTFSignal(ticker8, htf_timeframe, retrace_percent)

// --- Create Dashboard Table ---
if barstate.islast
    // Create table
    var table dashboard = table.new(position.top_right, 2, 9, bgcolor=color.new(color.black, 80), border_width=1)
    
    // Header
    table.cell(dashboard, 0, 0, "Ticker", text_color=color.white, bgcolor=color.new(color.gray, 50), text_size=size.normal)
    table.cell(dashboard, 1, 0, htf_timeframe, text_color=color.white, bgcolor=color.new(color.gray, 50), text_size=size.normal)
    
    // Ticker rows
    table.cell(dashboard, 0, 1, ticker1, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 1, signal1, 
        text_color=signal1 == "LONG" ? color.green : signal1 == "SHORT" ? color.red : color.yellow, 
        bgcolor=signal1 == "LONG" ? color.new(color.green, 80) : signal1 == "SHORT" ? color.new(color.red, 80) : color.new(color.yellow, 80),
        text_size=size.small)
    
    table.cell(dashboard, 0, 2, ticker2, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 2, signal2, 
        text_color=signal2 == "LONG" ? color.green : signal2 == "SHORT" ? color.red : color.yellow, 
        bgcolor=signal2 == "LONG" ? color.new(color.green, 80) : signal2 == "SHORT" ? color.new(color.red, 80) : color.new(color.yellow, 80),
        text_size=size.small)
    
    table.cell(dashboard, 0, 3, ticker3, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 3, signal3, 
        text_color=signal3 == "LONG" ? color.green : signal3 == "SHORT" ? color.red : color.yellow, 
        bgcolor=signal3 == "LONG" ? color.new(color.green, 80) : signal3 == "SHORT" ? color.new(color.red, 80) : color.new(color.yellow, 80),
        text_size=size.small)
    
    table.cell(dashboard, 0, 4, ticker4, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 4, signal4, 
        text_color=signal4 == "LONG" ? color.green : signal4 == "SHORT" ? color.red : color.yellow, 
        bgcolor=signal4 == "LONG" ? color.new(color.green, 80) : signal4 == "SHORT" ? color.new(color.red, 80) : color.new(color.yellow, 80),
        text_size=size.small)
    
    table.cell(dashboard, 0, 5, ticker5, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 5, signal5, 
        text_color=signal5 == "LONG" ? color.green : signal5 == "SHORT" ? color.red : color.yellow, 
        bgcolor=signal5 == "LONG" ? color.new(color.green, 80) : signal5 == "SHORT" ? color.new(color.red, 80) : color.new(color.yellow, 80),
        text_size=size.small)
    
    table.cell(dashboard, 0, 6, ticker6, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 6, signal6, 
        text_color=signal6 == "LONG" ? color.green : signal6 == "SHORT" ? color.red : color.yellow, 
        bgcolor=signal6 == "LONG" ? color.new(color.green, 80) : signal6 == "SHORT" ? color.new(color.red, 80) : color.new(color.yellow, 80),
        text_size=size.small)
    
    table.cell(dashboard, 0, 7, ticker7, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 7, signal7, 
        text_color=signal7 == "LONG" ? color.green : signal7 == "SHORT" ? color.red : color.yellow, 
        bgcolor=signal7 == "LONG" ? color.new(color.green, 80) : signal7 == "SHORT" ? color.new(color.red, 80) : color.new(color.yellow, 80),
        text_size=size.small)
    
    table.cell(dashboard, 0, 8, ticker8, text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 8, signal8, 
        text_color=signal8 == "LONG" ? color.green : signal8 == "SHORT" ? color.red : color.yellow, 
        bgcolor=signal8 == "LONG" ? color.new(color.green, 80) : signal8 == "SHORT" ? color.new(color.red, 80) : color.new(color.yellow, 80),
        text_size=size.small)

// --- Debug Information ---
if i_showDebug and barstate.islast
    debug_text = "HTF Debug\nT1:" + signal1 + " T2:" + signal2 + " T3:" + signal3 + " T4:" + signal4 + " T5:" + signal5 + " T6:" + signal6 + " T7:" + signal7 + " T8:" + signal8
    label.new(bar_index, high, debug_text, style=label.style_label_down, color=color.yellow, textcolor=color.black, size=size.normal)

// --- Alert Conditions ---
alertcondition(signal1 == "LONG", "T1 LONG", "LONG: " + ticker1)
alertcondition(signal1 == "SHORT", "T1 SHORT", "SHORT: " + ticker1)
alertcondition(signal2 == "LONG", "T2 LONG", "LONG: " + ticker2)
alertcondition(signal2 == "SHORT", "T2 SHORT", "SHORT: " + ticker2)
alertcondition(signal3 == "LONG", "T3 LONG", "LONG: " + ticker3)
alertcondition(signal3 == "SHORT", "T3 SHORT", "SHORT: " + ticker3)
alertcondition(signal4 == "LONG", "T4 LONG", "LONG: " + ticker4)
alertcondition(signal4 == "SHORT", "T4 SHORT", "SHORT: " + ticker4)
alertcondition(signal5 == "LONG", "T5 LONG", "LONG: " + ticker5)
alertcondition(signal5 == "SHORT", "T5 SHORT", "SHORT: " + ticker5)
alertcondition(signal6 == "LONG", "T6 LONG", "LONG: " + ticker6)
alertcondition(signal6 == "SHORT", "T6 SHORT", "SHORT: " + ticker6)
alertcondition(signal7 == "LONG", "T7 LONG", "LONG: " + ticker7)
alertcondition(signal7 == "SHORT", "T7 SHORT", "SHORT: " + ticker7)
alertcondition(signal8 == "LONG", "T8 LONG", "LONG: " + ticker8)
alertcondition(signal8 == "SHORT", "T8 SHORT", "SHORT: " + ticker8)
